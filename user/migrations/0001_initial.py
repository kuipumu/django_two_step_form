# Generated by Django 3.0.7 on 2020-07-01 20:03

import django.core.validators
from django.db import migrations, models
import phonenumber_field.modelfields
import user.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=254, verbose_name='first name')),
                ('last_name', models.CharField(max_length=254, verbose_name='last name')),
                ('national_id_type', models.CharField(choices=[('V', 'V'), ('E', 'E'), ('J', 'J'), ('P', 'P')], max_length=2, verbose_name='national ID type')),
                ('national_id', models.CharField(help_text='National ID must be in XXXXXXXXX format.', max_length=254, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_national_id', message='National ID must be in XXXXXXXXX format.', regex='^[0-9]{5,9}$')], verbose_name='national ID')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=254, region=None, verbose_name='phone number')),
                ('mobile_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='mobile number')),
                ('date_birth', models.DateField(help_text='Enter your birth date.', verbose_name='date birth')),
                ('security_question', models.CharField(help_text='Set you security question.', max_length=254, verbose_name='security question')),
                ('security_answer', models.CharField(help_text='Set the answer for your security question.', max_length=254, verbose_name='security answer')),
                ('photo', models.ImageField(blank=True, help_text='Upload a user photo, the image must be in a resolution proportional to 150x150.', null=True, upload_to=user.models.photo_directory_path, verbose_name='photo')),
                ('company_name', models.CharField(max_length=254, unique=True, verbose_name='name')),
                ('company_email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('rif_id_type', models.CharField(choices=[('V', 'V'), ('E', 'E'), ('J', 'J'), ('P', 'P'), ('G', 'G')], max_length=2, verbose_name='RIF ID type')),
                ('rif_id', models.CharField(help_text='RIF ID must be in XXXXXXXX-X format.', max_length=254, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_rif_id', message='RIF ID must be in XXXXXXXX-X format.', regex='^[0-9]{8}-[0-9]{1}$')], verbose_name='RIF ID')),
                ('company_phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=254, region=None, verbose_name='phone number')),
                ('company_address_line1', models.CharField(max_length=254, verbose_name='address line 1')),
                ('company_address_line2', models.CharField(blank=True, max_length=254, null=True, verbose_name='address line 2')),
                ('company_city', models.CharField(max_length=254, verbose_name='city')),
                ('company_state', models.CharField(choices=[('Amazonas', 'Anzoategui'), ('Apure', 'Aragua'), ('Barinas', 'Bolivar'), ('Carabobo', 'Cojedes'), ('Delta Amacuro', 'Dependencias Federales'), ('Distrito Federal', 'Falcon'), ('Guarico', 'Lara'), ('Merida', 'Miranda'), ('Monagas', 'Nueva Esparta'), ('Portuguesa', 'Sucre'), ('Tachira', 'Trujillo'), ('Vargas', 'Yaracuy')], max_length=254, verbose_name='state')),
                ('company_postal_code', models.CharField(max_length=4, verbose_name='postal code')),
                ('company_logo', models.ImageField(blank=True, help_text='Upload a company logo, the image must be in a resolution proportional to 250x150.', null=True, upload_to=user.models.logo_directory_path, verbose_name='logo')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Staff')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-email'],
                'unique_together': {('rif_id_type', 'rif_id'), ('national_id_type', 'national_id')},
            },
        ),
    ]
